{"version":3,"sources":["path-finding/dfs.js","path-finding/bfs.js","manual-control.js","helper.js","initBoard.js","maze-generation/basic-rand-maze.js","maze-generation/recursive-division.js","maze-generation/mgDfs.js","initControlPanel.js","script.js"],"names":["dfs","layPath","cell","app","isFirstRun","LAYING_PATH_DURATION","classList","add","path","push","start","previous","visitCell","isVisited","isWall","target","INSPECTING_CELL_DURATION","hasPath","search","DIRECTIONS","dir","state","neigh","removeAnimationTimeout","setTimeout","board","addClass","bfs","queue","length","shift","setupManualControl","markCellAsHead","userPathHead","remove","removeClass","markCellAsUserPath","previousUserPath","userPath","addUserPathHead","removeUserPathHead","filter","curCell","trimUserPath","nextCell","includes","press","e","keyCode","visitedCells","document","onkeydown","$","boardArr","numRow","numCol","lastMouseEnteredCell","wallCells","isMouseDown","isMovingStart","isMovingTarget","isSmashingWall","selectedPathfindingAlgo","delay","duration","Promise","resolve","markCellVisited","unmarkCellAsVisited","markCellAsWall","shouldRerender","newHead","rerenderPath","unmarkCellAsWall","clearWalls","clearSearchResult","clearUserPath","startPathFinding","rand","max","Math","floor","random","randInRange","min","getLast","array","initBoard","CELL_SIZE","calculateBoardSize","getLength","cssAttribute","css","replace","buildBoard","rowInnerHTML","i","colInnerHTML","j","html","mapBoarArr","toArray","forEach","rowEl","rowIndex","colEls","childNodes","colIndex","location","oncontextmenu","preventDefault","onmousedown","onmouseup","onmouseenter","onmouseleave","ondragstart","mapNeighBours","north","south","east","west","addStartAndTarget","buildBasicRandMaze","cells","buildRecursiveMaze","buildSurroundingWalls","buildWall","room","lowerBoundIndex","upperBoundIndex","headIndex","tailIndex","isVerticalWall","hasFoundation","wallIndex","getCell","generateWallIndex","hasPotentialWall","orientWall","sameOrientationAsParent","boundLength","wallLength","boundIndex","doorIndex","mgDfs","isOneWayCell","numSurroundingWalls","markAllCellsAsWall","stack","pop","unvisitedNeigh","initControlPanel","on","parent","parentNode","contains","isMenuOpened","id","text","innerText","clearTimeout"],"mappings":"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","file":"script.01c3d51d.js","sourceRoot":"..","sourcesContent":["import { app, delay, markCellVisited, clearSearchResult } from '../helper.js';\r\n\r\nconst layPath = async (cell) => {\r\n  if (app.isFirstRun) {\r\n    await delay(app.LAYING_PATH_DURATION);\r\n  }\r\n\r\n  cell.classList.add('path');\r\n  app.path.push(cell);\r\n\r\n  if (cell === app.start) {\r\n    app.isFirstRun = false;\r\n  } else {\r\n    layPath(cell.previous);\r\n  }\r\n};\r\n\r\nconst visitCell = async (previous, cell) => {\r\n  if (cell && !cell.isVisited && (!cell.isWall || cell === app.target)) {\r\n    if (app.isFirstRun) {\r\n      await delay(app.INSPECTING_CELL_DURATION);\r\n    }\r\n\r\n    cell.previous = previous;\r\n    markCellVisited(cell);\r\n\r\n    if (cell === app.target) {\r\n      app.hasPath = true;\r\n      layPath(app.target);\r\n      return;\r\n    }\r\n\r\n    await search(cell);\r\n  }\r\n};\r\n\r\nconst search = async (cell) => {\r\n  const DIRECTIONS = ['north', 'east', 'south', 'west'];\r\n  for (const dir of DIRECTIONS) {\r\n    // Early termination if user clear while searching\r\n    if (app.state !== 'searching') {\r\n      clearSearchResult();\r\n      return;\r\n    }\r\n\r\n    const neigh = cell.neigh[dir];\r\n    await visitCell(cell, neigh);\r\n\r\n    if (app.hasPath) {\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\nconst dfs = async () => {\r\n  markCellVisited(app.start);\r\n\r\n  await search(app.start);\r\n\r\n  if (app.state !== 'searching') {\r\n    return;\r\n  }\r\n\r\n  app.removeAnimationTimeout = setTimeout(() => {\r\n    app.board.addClass('no-animation');\r\n  }, 2000);\r\n\r\n  if (!app.hasPath) {\r\n    app.isFirstRun = false;\r\n  }\r\n\r\n  app.state = 'finished';\r\n};\r\n\r\nexport default dfs;\r\n","import { app, delay, markCellVisited, clearSearchResult } from '../helper.js';\r\n\r\nconst layPath = async (cell) => {\r\n  if (app.isFirstRun) {\r\n    await delay(app.LAYING_PATH_DURATION);\r\n  }\r\n\r\n  cell.classList.add('path');\r\n  app.path.push(cell);\r\n\r\n  if (cell === app.start) {\r\n    app.isFirstRun = false;\r\n  } else {\r\n    layPath(cell.previous);\r\n  }\r\n};\r\n\r\nconst visitCell = async (previous, cell) => {\r\n  if (cell && !cell.isVisited && (!cell.isWall || cell === app.target)) {\r\n    if (app.isFirstRun) {\r\n      await delay(app.INSPECTING_CELL_DURATION);\r\n    }\r\n\r\n    cell.previous = previous;\r\n    markCellVisited(cell);\r\n\r\n    if (cell === app.target) {\r\n      app.hasPath = true;\r\n      layPath(app.target);\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst search = async (cell) => {\r\n  const DIRECTIONS = ['north', 'east', 'south', 'west'];\r\n  for (const dir of DIRECTIONS) {\r\n    const neigh = cell.neigh[dir];\r\n    const isVisitable = await visitCell(cell, neigh);\r\n    if (isVisitable) {\r\n      app.queue.push(neigh);\r\n    }\r\n  }\r\n\r\n  if (app.hasPath || app.queue.length <= 0) {\r\n    return;\r\n  }\r\n\r\n  // Early termination if user clear while searching\r\n  if (app.state !== 'searching') {\r\n    clearSearchResult();\r\n    return;\r\n  }\r\n\r\n  await search(app.queue.shift());\r\n};\r\n\r\nconst bfs = async () => {\r\n  markCellVisited(app.start);\r\n\r\n  await search(app.queue.shift());\r\n\r\n  if (app.state !== 'searching') {\r\n    return;\r\n  }\r\n\r\n  app.removeAnimationTimeout = setTimeout(() => {\r\n    app.board.addClass('no-animation');\r\n  }, 2000);\r\n\r\n  if (!app.hasPath) {\r\n    app.isFirstRun = false;\r\n  }\r\n\r\n  app.state = 'finished';\r\n};\r\n\r\nexport default bfs;\r\n","import { app, getLast } from './helper.js';\r\n\r\nconst markCellAsHead = (cell) => {\r\n  app.userPathHead?.classList.remove('head');\r\n\r\n  app.userPathHead = cell;\r\n  cell.classList.add('head');\r\n  cell === app.target\r\n    ? app.board.addClass('completed-path')\r\n    : app.board.removeClass('completed-path');\r\n};\r\n\r\nconst markCellAsUserPath = (cell) => {\r\n  cell.classList.add('user-path');\r\n  if (cell !== app.start) {\r\n    cell.previousUserPath = getLast(app.userPath);\r\n  }\r\n  app.userPath.push(cell);\r\n}\r\n\r\nconst addUserPathHead = (cell) => {\r\n  markCellAsHead(cell);\r\n  markCellAsUserPath(cell);\r\n};\r\n\r\nconst removeUserPathHead = () => {\r\n  app.userPathHead.classList.remove('user-path', 'head');\r\n  app.userPathHead.previousUserPath = null;\r\n  app.userPath = app.userPath.filter((curCell) => curCell !== app.userPathHead);\r\n\r\n  if (app.userPath.length > 0) {\r\n    app.userPathHead = getLast(app.userPath);\r\n  } else {\r\n    addUserPathHead(app.start);\r\n  }\r\n};\r\n\r\nconst trimUserPath = (nextCell) => {\r\n  if (app.userPath.includes(nextCell)) {\r\n    // Back-track\r\n    while (app.userPathHead !== nextCell) {\r\n      removeUserPathHead(app.userPathHead);\r\n    }\r\n  }\r\n};\r\n\r\nconst press = (e) => {\r\n  if (e.keyCode > 36 && e.keyCode < 41 && app.visitedCells.length <= 0) {\r\n    let nextCell;\r\n\r\n    if (e.keyCode === 37) {\r\n      nextCell = app.userPathHead.neigh['west'];\r\n    } else if (e.keyCode === 38) {\r\n      nextCell = app.userPathHead.neigh['north'];\r\n    } else if (e.keyCode === 39) {\r\n      nextCell = app.userPathHead.neigh['east'];\r\n    } else if (e.keyCode === 40) {\r\n      nextCell = app.userPathHead.neigh['south'];\r\n    }\r\n\r\n    // Once user reach target, they can only backtrack\r\n    if (app.userPathHead === app.target && !app.userPath.includes(nextCell)) {\r\n      return;\r\n    }\r\n\r\n    trimUserPath(nextCell);\r\n\r\n    if (nextCell && !nextCell.isWall) {\r\n      addUserPathHead(nextCell);\r\n    }\r\n  }\r\n};\r\n\r\nconst setupManualControl = () => {\r\n  document.onkeydown = press;\r\n  addUserPathHead(app.start);\r\n};\r\n\r\nexport default setupManualControl;\r\nexport { trimUserPath, removeUserPathHead };\r\n","import dfs from './path-finding/dfs.js';\r\nimport bfs from './path-finding/bfs.js';\r\nimport { trimUserPath, removeUserPathHead } from './manual-control.js';\r\n\r\nconst app = {\r\n  board: $('#board'),\r\n  boardArr: [],\r\n  numRow: 20,\r\n  numCol: 20,\r\n\r\n  start: null,\r\n  target: null,\r\n  lastMouseEnteredCell: null,\r\n  userPathHead: null,\r\n\r\n  INSPECTING_CELL_DURATION: 5,\r\n  LAYING_PATH_DURATION: 50,\r\n\r\n  queue: [],\r\n  userPath: [],\r\n  path: [],\r\n  visitedCells: [],\r\n  wallCells: [],\r\n\r\n  state: 'waiting', // Possible states: waiitng, searching, finished\r\n\r\n  isMouseDown: false,\r\n  isMovingStart: false,\r\n  isMovingTarget: false,\r\n  isSmashingWall: false,\r\n  isFirstRun: true,\r\n  hasPath: false,\r\n\r\n  removeAnimationTimeout: null,\r\n\r\n  selectedPathfindingAlgo: 'bfs',\r\n};\r\n\r\nconst delay = async (duration) =>\r\n  await new Promise((resolve) => setTimeout(resolve, duration));\r\n\r\nconst markCellVisited = (cell) => {\r\n  app.visitedCells.push(cell);\r\n  cell.classList.add('visited');\r\n  cell.isVisited = true;\r\n\r\n  app.queue.push(cell);\r\n};\r\n\r\nconst unmarkCellAsVisited = (cell) => {\r\n  app.visitedCells = app.visitedCells.filter((curCell) => curCell !== cell);\r\n  app.queue = app.queue.filter((curCell) => curCell !== cell);\r\n  cell.classList.remove('visited');\r\n  cell.isVisited = false;\r\n}\r\n\r\nconst markCellAsWall = (cell, shouldRerender = false) => {\r\n  if (cell !== app.start && cell !== app.target) {\r\n    cell.isWall = true;\r\n    cell.classList.add('wall');\r\n    app.wallCells.push(cell);\r\n\r\n    if (app.userPath.includes(cell)) {\r\n      const newHead = cell.previousUserPath;\r\n      trimUserPath(newHead);\r\n      newHead.classList.add('head');\r\n    }\r\n\r\n    if (shouldRerender) {\r\n      rerenderPath();\r\n    }\r\n  }\r\n};\r\n\r\nconst unmarkCellAsWall = (cell) => {\r\n  cell.isWall = false;\r\n  cell.classList.remove('wall');\r\n  app.wallCells.filter((curCell) => curCell !== cell);\r\n  rerenderPath();\r\n};\r\n\r\nconst clearWalls = () => {\r\n  while (app.wallCells.length > 0) {\r\n    const cell = app.wallCells.shift();\r\n    cell.isWall = false;\r\n    cell.classList.remove('wall');\r\n  }\r\n};\r\n\r\nconst clearSearchResult = () => {\r\n  app.queue = [];\r\n\r\n  app.hasPath = false;\r\n  while (app.path.length > 0) {\r\n    const cell = app.path.shift();\r\n    cell.classList.remove('path');\r\n  }\r\n\r\n  while (app.visitedCells.length > 0) {\r\n    const cell = app.visitedCells.shift();\r\n    unmarkCellAsVisited(cell);\r\n  }\r\n\r\n  clearUserPath();\r\n};\r\n\r\nconst clearUserPath = () => {\r\n  while (app.userPathHead !== app.start || app.userPath.length !== 1) {\r\n    removeUserPathHead();\r\n  }\r\n};\r\n\r\nconst startPathFinding = () => {\r\n  app.state = 'searching';\r\n  clearSearchResult();\r\n\r\n  switch (app.selectedPathfindingAlgo) {\r\n    case 'bfs':\r\n      bfs();\r\n      break;\r\n    case 'dfs':\r\n      dfs();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst rerenderPath = () => {\r\n  if (!app.isFirstRun) {\r\n    startPathFinding();\r\n  }\r\n};\r\n\r\nconst rand = (max) => Math.floor(Math.random() * max + 1);\r\nconst randInRange = (min, max) => rand(max - min) + min - 1;\r\n\r\nconst getLast = (array) => {\r\n  return array[array.length - 1];\r\n};\r\n\r\nexport {\r\n  app,\r\n  delay,\r\n  markCellVisited,\r\n  unmarkCellAsVisited,\r\n  markCellAsWall,\r\n  unmarkCellAsWall,\r\n  startPathFinding,\r\n  rerenderPath,\r\n  clearWalls,\r\n  clearSearchResult,\r\n  clearUserPath,\r\n  rand,\r\n  randInRange,\r\n  getLast,\r\n};\r\n","import {\r\n  app,\r\n  markCellAsWall,\r\n  unmarkCellAsWall,\r\n  rerenderPath,\r\n  clearUserPath,\r\n} from './helper.js';\r\n\r\nconst CELL_SIZE = 25;\r\n\r\nconst calculateBoardSize = () => {\r\n  const getLength = (cssAttribute) => {\r\n    return app.board.css(cssAttribute).replace('px', '');\r\n  };\r\n\r\n  app.numCol = Math.floor(\r\n    (getLength('width') -\r\n      getLength('padding-left') -\r\n      getLength('padding-right')) /\r\n      CELL_SIZE\r\n  );\r\n  app.numRow = Math.floor(\r\n    (getLength('height') -\r\n      getLength('padding-top') -\r\n      getLength('padding-bottom')) /\r\n      CELL_SIZE\r\n  );\r\n};\r\n\r\nconst buildBoard = () => {\r\n  calculateBoardSize();\r\n\r\n  let rowInnerHTML = '';\r\n  for (let i = 0; i < app.numRow; i++) {\r\n    let colInnerHTML = '';\r\n    for (let j = 0; j < app.numCol; j++) {\r\n      colInnerHTML += '<div class=\"cell\"></div>';\r\n    }\r\n    rowInnerHTML += `<div class=\"row\">${colInnerHTML}</div>`;\r\n  }\r\n\r\n  app.board.html(rowInnerHTML);\r\n};\r\n\r\nconst mapBoarArr = () => {\r\n  const rowEls = $('.row').toArray();\r\n  rowEls.forEach((rowEl, rowIndex) => {\r\n    const colEls = rowEl.childNodes;\r\n\r\n    app.boardArr[rowIndex] = [];\r\n    colEls.forEach((cell, colIndex) => {\r\n      app.boardArr[rowIndex][colIndex] = cell;\r\n      cell.location = { rowIndex, colIndex };\r\n\r\n      cell.oncontextmenu = (e) => {\r\n        e.preventDefault();\r\n      };\r\n\r\n      cell.onmousedown = () => {\r\n        app.isMouseDown = true;\r\n        if (cell === app.start) {\r\n          app.isMovingStart = true;\r\n        } else if (cell === app.target) {\r\n          app.isMovingTarget = true;\r\n        } else {\r\n          if (cell.isWall) {\r\n            app.isSmashingWall = true;\r\n            unmarkCellAsWall(cell);\r\n          } else {\r\n            markCellAsWall(cell, true);\r\n          }\r\n        }\r\n      };\r\n\r\n      cell.onmouseup = () => {\r\n        app.isMouseDown = false;\r\n        app.isMovingStart = false;\r\n        app.isMovingTarget = false;\r\n        app.isSmashingWall = false;\r\n      };\r\n\r\n      cell.onmouseenter = () => {\r\n        if (app.isMouseDown) {\r\n          if (app.isMovingStart) {\r\n            app.start = cell === app.target ? app.lastMouseEnteredCell : cell;\r\n            app.start.classList.add('start');\r\n            app.start.classList.remove('wall');\r\n            clearUserPath();\r\n            rerenderPath();\r\n          } else if (app.isMovingTarget) {\r\n            app.target = cell === app.start ? app.lastMouseEnteredCell : cell;\r\n            app.target.classList.add('target');\r\n            app.target.classList.remove('wall');\r\n            clearUserPath();\r\n            rerenderPath();\r\n          } else if (app.isSmashingWall) {\r\n            unmarkCellAsWall(cell);\r\n          } else {\r\n            markCellAsWall(cell, true);\r\n          }\r\n        }\r\n      };\r\n\r\n      cell.onmouseleave = () => {\r\n        app.lastMouseEnteredCell = cell;\r\n        if (app.isMovingStart) {\r\n          app.start.classList.remove('start');\r\n          if (app.start.isWall) {\r\n            app.start.classList.add('wall');\r\n          }\r\n          app.start = null;\r\n        } else if (app.isMovingTarget) {\r\n          app.target.classList.remove('target');\r\n          if (app.target.isWall) {\r\n            app.target.classList.add('wall');\r\n          }\r\n          app.target = null;\r\n        }\r\n      };\r\n\r\n      cell.ondragstart = () => {\r\n        return false;\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\nconst mapNeighBours = () => {\r\n  for (let rowIndex = 0; rowIndex < app.numRow; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < app.numCol; colIndex++) {\r\n      const cell = app.boardArr[rowIndex][colIndex];\r\n      cell.neigh = {\r\n        north: rowIndex !== 0 ? app.boardArr[rowIndex - 1][colIndex] : null,\r\n        south:\r\n          rowIndex !== app.numRow - 1\r\n            ? app.boardArr[rowIndex + 1][colIndex]\r\n            : null,\r\n        east:\r\n          colIndex !== app.numCol - 1\r\n            ? app.boardArr[rowIndex][colIndex + 1]\r\n            : null,\r\n        west: colIndex !== 0 ? app.boardArr[rowIndex][colIndex - 1] : null,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst addStartAndTarget = () => {\r\n  app.start =\r\n    app.boardArr[Math.floor(app.numRow / 2)][Math.floor(app.numCol / 3)];\r\n  app.target =\r\n    app.boardArr[Math.floor(app.numRow / 2)][Math.floor((app.numCol * 2) / 3)];\r\n\r\n  app.start.classList.add('start');\r\n  app.target.classList.add('target');\r\n};\r\n\r\nconst initBoard = () => {\r\n  buildBoard();\r\n  mapBoarArr();\r\n  mapNeighBours();\r\n  addStartAndTarget();\r\n};\r\n\r\nexport default initBoard;\r\n","import { app, markCellAsWall } from '../helper.js';\r\n\r\nconst rand = () => Math.floor(Math.random() * 10 + 1);\r\n\r\nconst buildBasicRandMaze = () => {\r\n  const cells = $('.cell').toArray();\r\n  for (const cell of cells) {\r\n    if (rand() >= 8 && cell !== app.start && cell !== app.target) {\r\n      markCellAsWall(cell);\r\n    }\r\n  }\r\n};\r\n\r\nexport default buildBasicRandMaze;\r\n","import { app, delay, markCellAsWall } from '../helper.js';\r\n\r\nconst rand = (max) => Math.floor(Math.random() * max + 1);\r\nconst randInRange = (min, max) => rand(max - min) + min - 1;\r\n\r\nconst buildSurroundingWalls = async () => {\r\n  for (let rowIndex = 0; rowIndex < app.numRow; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < app.numCol; colIndex++) {\r\n      if (\r\n        rowIndex === 0 ||\r\n        rowIndex === app.numRow - 1 ||\r\n        colIndex === 0 ||\r\n        colIndex === app.numCol - 1\r\n      ) {\r\n        await delay(app.INSPECTING_CELL_DURATION);\r\n        const cell = app.boardArr[rowIndex][colIndex];\r\n        markCellAsWall(cell);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst buildRecursiveMaze = async () => {\r\n  await buildSurroundingWalls();\r\n\r\n  const room = {\r\n    lowerBoundIndex: 1,\r\n    upperBoundIndex: app.numCol - 2,\r\n    headIndex: 1,\r\n    tailIndex: app.numRow - 2,\r\n    isVerticalWall: true,\r\n  };\r\n  await buildWall(room);\r\n};\r\n\r\nconst hasFoundation = (wallIndex, headIndex, tailIndex, isVerticalWall) => {\r\n  return (\r\n    getCell(wallIndex, headIndex - 1, isVerticalWall).isWall ||\r\n    getCell(wallIndex, tailIndex + 1, isVerticalWall).isWall\r\n  );\r\n};\r\n\r\nconst generateWallIndex = (room) => {\r\n  const {\r\n    lowerBoundIndex,\r\n    upperBoundIndex,\r\n    headIndex,\r\n    tailIndex,\r\n    isVerticalWall,\r\n  } = room;\r\n\r\n  let hasPotentialWall = false;\r\n  for (let i = lowerBoundIndex + 1; i < upperBoundIndex; i += 2) {\r\n    hasPotentialWall = hasFoundation(i, headIndex, tailIndex, isVerticalWall);\r\n    if (hasPotentialWall) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!hasPotentialWall) {\r\n    return -1;\r\n  }\r\n\r\n  let wallIndex =\r\n    rand((upperBoundIndex - lowerBoundIndex) / 2) * 2 + lowerBoundIndex - 1;\r\n  while (!hasFoundation(wallIndex, headIndex, tailIndex, isVerticalWall)) {\r\n    wallIndex =\r\n      rand((upperBoundIndex - lowerBoundIndex) / 2) * 2 + lowerBoundIndex - 1;\r\n  }\r\n\r\n  return wallIndex;\r\n};\r\n\r\nconst orientWall = async (room) => {\r\n  const {\r\n    lowerBoundIndex,\r\n    upperBoundIndex,\r\n    headIndex,\r\n    tailIndex,\r\n    isVerticalWall,\r\n  } = room;\r\n\r\n  const boundLength = upperBoundIndex - lowerBoundIndex;\r\n  const wallLength = tailIndex - headIndex;\r\n\r\n  let sameOrientationAsParent = true;\r\n  if (boundLength < wallLength) {\r\n    sameOrientationAsParent = false;\r\n  } else if (boundLength === wallLength) {\r\n    sameOrientationAsParent = rand(2) === 1;\r\n  }\r\n\r\n  if (sameOrientationAsParent) {\r\n    await buildWall(room);\r\n  } else {\r\n    await buildWall({\r\n      lowerBoundIndex: headIndex,\r\n      upperBoundIndex: tailIndex,\r\n      headIndex: lowerBoundIndex,\r\n      tailIndex: upperBoundIndex,\r\n      isVerticalWall: !isVerticalWall,\r\n    });\r\n  }\r\n};\r\n\r\nconst getCell = (wallIndex, boundIndex, isVerticalWall) => {\r\n  return isVerticalWall\r\n    ? app.boardArr[boundIndex][wallIndex]\r\n    : app.boardArr[wallIndex][boundIndex];\r\n};\r\n\r\nconst buildWall = async (room) => {\r\n  const {\r\n    lowerBoundIndex,\r\n    upperBoundIndex,\r\n    headIndex,\r\n    tailIndex,\r\n    isVerticalWall,\r\n  } = room;\r\n\r\n  if (upperBoundIndex - lowerBoundIndex - 2 < 0 || tailIndex - headIndex < 1) {\r\n    return false;\r\n  }\r\n\r\n  let wallIndex = generateWallIndex(room);\r\n  const doorIndex = randInRange(headIndex, tailIndex);\r\n\r\n  if (wallIndex === -1) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = headIndex; i <= tailIndex; i++) {\r\n    if (i === doorIndex) {\r\n      continue;\r\n    }\r\n\r\n    await delay(app.INSPECTING_CELL_DURATION);\r\n    let cell = getCell(wallIndex, i, isVerticalWall);\r\n\r\n    if (\r\n      (i === headIndex &&\r\n        !getCell(wallIndex, headIndex - 1, isVerticalWall).isWall) || // Head is next to a door\r\n      (i === tailIndex &&\r\n        !getCell(wallIndex, tailIndex + 1, isVerticalWall).isWall) // Tail is next to a door)\r\n    ) {\r\n      cell = getCell(wallIndex, doorIndex, isVerticalWall);\r\n    }\r\n\r\n    markCellAsWall(cell);\r\n  }\r\n\r\n  await orientWall({ ...room, upperBoundIndex: wallIndex - 1 });\r\n  await orientWall({ ...room, lowerBoundIndex: wallIndex + 1 });\r\n\r\n  return true;\r\n};\r\n\r\nexport default buildRecursiveMaze;\r\n","import {\r\n  app,\r\n  delay,\r\n  markCellAsWall,\r\n  rand,\r\n  unmarkCellAsWall,\r\n} from '../helper.js';\r\n\r\nconst DIRECTIONS = ['north', 'east', 'south', 'west'];\r\n\r\nconst isOneWayCell = (cell) => {\r\n  let numSurroundingWalls = 0;\r\n\r\n  for (const dir of DIRECTIONS) {\r\n    const neigh = cell.neigh[dir];\r\n    if (!neigh || neigh === app.start || neigh === app.target || neigh.isWall) {\r\n      numSurroundingWalls++;\r\n    }\r\n  }\r\n\r\n  return numSurroundingWalls === 3;\r\n};\r\n\r\nconst markAllCellsAsWall = () => {\r\n  for (const cell of $('.cell').toArray()) {\r\n    markCellAsWall(cell);\r\n  }\r\n};\r\n\r\nconst mgDfs = async () => {\r\n  markAllCellsAsWall();\r\n\r\n  const cell = app.boardArr[rand(app.numRow) - 1][rand(app.numCol) - 1];\r\n  const stack = [cell];\r\n  unmarkCellAsWall(cell);\r\n\r\n  while (stack.length > 0) {\r\n    const curCell = stack.pop();\r\n\r\n    const unvisitedNeigh = [];\r\n    for (const dir of DIRECTIONS) {\r\n      const neigh = curCell.neigh[dir];\r\n      if (neigh?.isWall && isOneWayCell(neigh)) {\r\n        unvisitedNeigh.push(neigh);\r\n      }\r\n    }\r\n\r\n    if (unvisitedNeigh.length > 0) {\r\n      await delay(app.INSPECTING_CELL_DURATION);\r\n      const neigh = unvisitedNeigh[rand(unvisitedNeigh.length) - 1];\r\n      stack.push(curCell, neigh);\r\n      unmarkCellAsWall(neigh);\r\n    }\r\n  }\r\n};\r\n\r\nexport default mgDfs;\r\n","import {\r\n  app,\r\n  startPathFinding,\r\n  rerenderPath,\r\n  clearWalls,\r\n  clearSearchResult,\r\n  clearUserPath,\r\n} from './helper.js';\r\nimport buildBasicRandMaze from './maze-generation/basic-rand-maze.js';\r\nimport buildRecursiveMaze from './maze-generation/recursive-division.js';\r\nimport mgDfs from './maze-generation/mgDfs.js';\r\n\r\nconst initControlPanel = () => {\r\n  $('.dropdown-box').on('click', (e) => {\r\n    let parent = e.target.parentNode;\r\n    while (!parent.classList.contains('dropdown-box')) {\r\n      parent = parent.parentNode;\r\n    }\r\n\r\n    const isMenuOpened = parent.classList.contains('opened');\r\n\r\n    for (const dropdown of $('.dropdown-box').toArray()) {\r\n      dropdown.classList.remove('opened');\r\n    }\r\n\r\n    isMenuOpened\r\n      ? parent.classList.remove('opened')\r\n      : parent.classList.add('opened');\r\n  });\r\n\r\n  $('#path-finding-dropdown').on('click', (e) => {\r\n    switch (e.target.id) {\r\n      case 'bfs':\r\n      case 'dfs':\r\n        $('#path-finding-dropdown small').text(e.target.innerText);\r\n        app.selectedPathfindingAlgo = e.target.id;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    rerenderPath();\r\n  });\r\n\r\n  $('.start-btn').on('click', () => {\r\n    if (app.start && app.target) {\r\n      startPathFinding();\r\n    }\r\n  });\r\n\r\n  $('#maze-generator-dropdown').on('click', async (e) => {\r\n    if (e.target.classList.contains('dropdown-item')) {\r\n      clearSearchResult();\r\n      clearWalls();\r\n      clearUserPath();\r\n\r\n      switch (e.target.id) {\r\n        case 'random':\r\n          buildBasicRandMaze();\r\n          break;\r\n        case 'recursive-division':\r\n          await buildRecursiveMaze();\r\n          break;\r\n        case 'mgDfs':\r\n          await mgDfs();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      rerenderPath();\r\n    }\r\n  });\r\n\r\n  $('.clear-dropdown').on('click', (e) => {\r\n    if (e.target.classList.contains('dropdown-item')) {\r\n      app.state = 'finished';\r\n      clearSearchResult();\r\n\r\n      app.isFirstRun = true;\r\n      app.board.removeClass('no-animation');\r\n      clearTimeout(app.removeAnimationTimeout); // For edge case, when board is cleared during board is waiting for no-animation to be added\r\n\r\n      if (e.target.id === 'clear-walls') {\r\n        clearWalls();\r\n      }\r\n\r\n      app.state = 'waiting';\r\n    }\r\n  });\r\n};\r\n\r\nexport default initControlPanel;","import initBoard from './initBoard.js';\r\nimport initControlPanel from './initControlPanel.js';\r\nimport setupManualControl from './manual-control.js';\r\n\r\ninitBoard();\r\ninitControlPanel();\r\nsetupManualControl();\r\n"]}